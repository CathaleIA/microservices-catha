AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Arquitectura Ingesta + AppSync + Timestream + DynamoDB + EventBridge

Globals:
  Function:
    Runtime: python3.12
    Timeout: 30
    MemorySize: 128

Resources:
  AssetStatusTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: AssetStatus
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: assetId
          AttributeType: S
      KeySchema:
        - AttributeName: assetId
          KeyType: HASH

  ## --- Timestream ---
  AssetTimestreamDB:
    Type: AWS::Timestream::Database
    Properties:
      DatabaseName: AssetMetricsDB

  AssetTimestreamTable:
    Type: AWS::Timestream::Table
    DependsOn:
      - AssetTimestreamDB
    Properties:
      DatabaseName: !Ref AssetTimestreamDB
      TableName: AssetMetricsTable
      RetentionProperties:
        MemoryStoreRetentionPeriodInHours: 12
        MagneticStoreRetentionPeriodInDays: 90

  AssetApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: AssetDashboardAPI
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      UserPoolConfig:
        AwsRegion: !Ref AWS::Region
        UserPoolId: "us-east-1_hWdkRwqlP"
        DefaultAction: ALLOW
      AdditionalAuthenticationProviders:
        - AuthenticationType: AWS_IAM

  AssetSchema:
    Type: AWS::AppSync::GraphQLSchema
    DependsOn:
      - AssetApi
    Properties:
      ApiId: !GetAtt AssetApi.ApiId
      Definition: |
        type AssetUpdate
          @aws_cognito_user_pools
          @aws_iam
        {
          assetId: ID!
          status: String!
          timestamp: AWSDateTime!
          presionAceite: Float
          presionCombustible: Float
          presionTurbo: Float
        }

        type Metric {
          timestamp: String!
          metric: String!
          value: Float!
        }

        type TimeSeriesPoint {
          timestamp: AWSDateTime!
          value: Float!
        }

        type Mutation {
          publishUpdate(
            assetId: String!, 
            status: String!, 
            timestamp: String!,
            presionAceite: Float!
            presionCombustible: Float!
            presionTurbo: Float!
            ): AssetUpdate @aws_iam
        }

        type Subscription {
          onUpdate: AssetUpdate
            @aws_subscribe(mutations: ["publishUpdate"])
        }

        type Query {
          getStatus(assetId: String!): AssetUpdate
          getMetrics(assetId: String!, start: String!, end: String!) : [Metric]
          getHistoricalData(start: AWSDateTime!, end: AWSDateTime!): [TimeSeriesPoint]
        }

  AssetApiRole:
    Type: AWS::IAM::Role
    DependsOn:
      - AssetStatusTable
      - LambdaQueryHandler
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AssetApiDynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                Resource: !GetAtt AssetStatusTable.Arn
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt LambdaQueryHandler.Arn
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt LambdaSnowflakeQuery,Arn

  ## --- Lambda Ingesta ---
  LambdaIngesta:
    Type: AWS::Serverless::Function
    DependsOn:
      - AssetTimestreamTable
      - AssetTimestreamDB
      - AssetStatusTable
    Properties:
      CodeUri: IngestaService/
      Handler: lambda_ingesta.lambda_handler
      Policies:
        - Version:  "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: !GetAtt AssetStatusTable.Arn
            - Effect: Allow
              Action:
                - timestream:WriteRecords
                - timestream:DescribeEndpoints
              Resource: "*"
            - Effect: Allow
              Action:
                - appsync:GraphQL
              Resource: "*"
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref AssetStatusTable
          TIMESTREAM_DB: !Ref AssetTimestreamDB
          TIMESTREAM_TABLE: AssetMetricsTable
          APPSYNC_API_URL: !GetAtt AssetApi.GraphQLUrl
          APPSYNC_API_KEY: "NO_KEY"
          FAKE_API_URL: "https://apibackend-esjz.onrender.com/api/motor"

  ## --- Lambda Lectura --
  LambdaQueryHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: QueryService/
      Handler: lambda_query.lambda_handler
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource: !GetAtt AssetStatusTable.Arn
            - Effect: Allow
              Action:
                - timestream:Query
                - timestream:Select
                - timestream:DescribeEndpoints
              Resource: "*"
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref AssetStatusTable
          TIMESTREAM_DB: !Ref AssetTimestreamDB
          TIMESTREAM_TABLE: AssetMetricsTable

  ## --- Lambda snowflake ---
  LambdaSnowflakeQuery:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SnowflakeQueryLambda/
      Handler: lambda_snow.lambda_handler
      Policies:
        - SecretsManagerReadWrite
      Environment:
        Variables:
          SNOWFLAKE_SECRET: SnowflakeCredentials

  ## -- Data sorce snowflake --
  SnowflakeDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AssetApi.ApiId
      Name: SnowflakeDataSource
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt LambdaSnowflakeQuery.Arn
      ServiceRoleArn: !GetAtt AssetApiRole.Arn

  ## -- Data Source --
  LambdaQueryDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AssetApi.ApiId
      Name: LambdaQueryDataSource
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt LambdaQueryHandler.Arn
      ServiceRoleArn: !GetAtt AssetApiRole.Arn

  ## -- Data source none --
  NoneDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AssetApi.ApiId
      Name: NoneDataSource
      Type: NONE

  ## -- Tesolver Subscription --
  PublishUpdateResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: NoneDataSource
    Properties:
      ApiId: !GetAtt AssetApi.ApiId
      TypeName: Mutation
      FieldName: publishUpdate
      DataSourceName: NoneDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29"
        }
      ResponseMappingTemplate: "$util.toJson($context.arguments)"

  ## -- Resolver para Dynamo -- 
  AssetQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: LambdaQueryDataSource
    Properties:
      ApiId: !GetAtt AssetApi.ApiId
      TypeName: Query
      FieldName: getStatus
      DataSourceName: LambdaQueryDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "getStatus"
            },
            "arguments": $util.toJson($context.arguments)
          }
        }
      ResponseMappingTemplate: "$util.toJson($context.result)"

  ## -- Resolver para timestream --
  AssetMetricsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: LambdaQueryDataSource
    Properties:
      ApiId: !GetAtt AssetApi.ApiId
      TypeName: Query
      FieldName: getMetrics
      DataSourceName: LambdaQueryDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "info": {
              "fieldName": "getMetrics"
            },
            "arguments": $util.toJson($context.arguments)
          }
        }
      ResponseMappingTemplate: "$util.toJson($context.result)"

  ## -- Resolver snowflake
  GetHistoricalDataResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AssetApi.ApiId
      TypeName: Query
      FieldName: getHistoricalData
      DataSourceName: !Ref SnowflakeDataSource
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "arguments": $util.toJson($context.arguments),
            "info": $util.toJson($context.info)
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.result.statusCode == 200)
          $util.toJson($util.parseJson($ctx.result.body))
        #else
          $util.error($ctx.result.body, "LambdaError")
        #end


  ## --- EventBridge Scheduler ---
  LambdaIngestaSchedule:
    Type: AWS::Events::Rule
    DependsOn:
      - AssetTimestreamTable
      - AssetTimestreamDB
      - LambdaIngesta
    Properties:
      ScheduleExpression: rate(10 minutes) # <-- Cambia intervalo
      Targets:
        - Arn: !GetAtt LambdaIngesta.Arn
          Id: LambdaIngestaTarget

  LambdaIngestaPermission:
    Type: AWS::Lambda::Permission
    DependsOn: 
      - LambdaIngestaSchedule
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaIngesta
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LambdaIngestaSchedule.Arn
